909. Snakes and Ladders
solution:

from collections import deque
from typing import List

class Solution:
    def snakesAndLadders(self, board: List[List[int]]) -> int:
        n = len(board)
        end = n * n

        def to_position(num: int) -> (int, int):
            q, r = divmod(num - 1, n)
            row = n - 1 - q
            col = r if q % 2 == 0 else n - 1 - r
            return row, col

        seen = [False] * (end + 1)
        q = deque()
        q.append((1, 0))
        seen[1] = True

        while q:
            curr, dist = q.popleft()
            for i in range(1, 7):
                nxt = curr + i
                if nxt > end:
                    break
                r, c = to_position(nxt)
                if board[r][c] != -1:
                    nxt = board[r][c]
                if nxt == end:
                    return dist + 1
                if not seen[nxt]:
                    seen[nxt] = True
                    q.append((nxt, dist + 1))
        return -1
