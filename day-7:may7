3341. Find Minimum Time to Reach Last Room I
solution:
from heapq import heappush, heappop
from typing import List

class Solution:
    def minTimeToReach(self, moveTime: List[List[int]]) -> int:
        n, m = len(moveTime), len(moveTime[0])
        directions = [(-1, 0), (0, 1), (1, 0), (0, -1)]
        dist = [[float('inf')] * m for _ in range(n)]
        dist[0][0] = 0
        pq = [(0, 0, 0)]
        
        while pq:
            time, row, col = heappop(pq)
            if row == n - 1 and col == m - 1:
                return time
            if time > dist[row][col]:
                continue
            for dx, dy in directions:
                new_row, new_col = row + dx, col + dy
                if 0 <= new_row < n and 0 <= new_col < m:
                    new_time = max(time + 1, moveTime[new_row][new_col] + 1)
                    if new_time < dist[new_row][new_col]:
                        dist[new_row][new_col] = new_time
                        heappush(pq, (new_time, new_row, new_col))
        
        return dist[n-1][m-1]
