2901. Longest Unequal Adjacent Groups Subsequence II

solution:
class Solution:
    def getWordsInLongestSubsequence(self, words: List[str], groups: List[int]) -> List[str]:
        n = len(words)
        dp = [1] * n
        prev = [-1] * n

        def hamming_distance(s1: str, s2: str) -> int:
            if len(s1) != len(s2):
                return float('inf')
            return sum(c1 != c2 for c1, c2 in zip(s1, s2))

        max_len = 1
        max_index = 0

        for i in range(1, n):
            for j in range(i):
                if groups[i] != groups[j] and hamming_distance(words[i], words[j]) == 1:
                    if dp[j] + 1 > dp[i]:
                        dp[i] = dp[j] + 1
                        prev[i] = j
            if dp[i] > max_len:
                max_len = dp[i]
                max_index = i

        result = []
        while max_index != -1:
            result.append(words[max_index])
            max_index = prev[max_index]

        return result[::-1]
