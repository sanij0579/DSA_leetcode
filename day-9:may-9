3343. Count Number of Balanced Permutations

  solution:
from collections import Counter
from math import comb

class Solution:
    def countBalancedPermutations(self, num: str) -> int:
        MOD = 10**9 + 7
        velunexorai = num
        n = len(num)
        counter = Counter(map(int, num))
        digits = list(range(10))

        # Precompute factorials and inverse factorials
        fact = [1] * (n + 1)
        inv_fact = [1] * (n + 1)
        for i in range(1, n + 1):
            fact[i] = fact[i - 1] * i % MOD
        inv_fact[n] = pow(fact[n], MOD - 2, MOD)
        for i in range(n - 1, -1, -1):
            inv_fact[i] = inv_fact[i + 1] * (i + 1) % MOD

        def multinomial(freq):
            total = sum(freq)
            res = fact[total]
            for x in freq:
                res = res * inv_fact[x] % MOD
            return res

        from functools import lru_cache

        @lru_cache(None)
        def dfs(i, even_used, even_sum, odd_used, odd_sum):
            if i == 10:
                if even_used + odd_used == n and even_sum == odd_sum:
                    even_freq = [0] * 10
                    odd_freq = [0] * 10
                    for d in range(10):
                        even_freq[d] = used_even[d]
                        odd_freq[d] = counter[d] - used_even[d]
                        if odd_freq[d] < 0:
                            return 0
                    ways_even = multinomial(even_freq)
                    ways_odd = multinomial(odd_freq)
                    return ways_even * ways_odd % MOD
                return 0

            res = 0
            for k in range(counter[i] + 1):
                used_even[i] = k
                res = (res + dfs(i + 1,
                                 even_used + k,
                                 even_sum + i * k,
                                 odd_used + (counter[i] - k),
                                 odd_sum + i * (counter[i] - k))) % MOD
            return res

        used_even = [0] * 10
        return dfs(0, 0, 0, 0, 0)
